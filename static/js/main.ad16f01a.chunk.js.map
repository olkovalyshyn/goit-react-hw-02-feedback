{"version":3,"sources":["components/Feedback/Statistics.js","components/Feedback/FeedbackOptions.js","components/Feedback/Feedback.js","App.js","reportWebVitals.js","index.js"],"names":["Statistics","good","neutral","bad","total","positivePercentage","FeedbackOptions","options","onLeaveFeedback","map","option","type","name","onClick","Feedback","state","clickEventBtn","setState","countTotalFeedback","countPositiveFeedbackPercentage","this","React","Component","App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+PAEe,SAASA,EAAT,GAMX,IALFC,EAKC,EALDA,KACAC,EAIC,EAJDA,QACAC,EAGC,EAHDA,IACAC,EAEC,EAFDA,MACAC,EACC,EADDA,mBAEA,OACE,gCASE,+BACG,IADH,aAGE,wCAAWJ,KACX,2CAAcC,KACd,uCAAUC,KACV,yCAAYC,KACZ,qDAAwBC,EAAxB,UAhBJ,OCRW,SAASC,EAAT,GAAwD,IAA7BC,EAA4B,EAA5BA,QAASC,EAAmB,EAAnBA,gBACjD,OAAOD,EAAQE,KAAI,SAACC,GAAD,OACjB,wBAAQC,KAAK,SAASC,KAAMF,EAAQG,QAASL,EAAgBE,GAA7D,SACGA,O,ICqDQI,E,4MApDbC,MAAQ,CACNd,KAAM,EACNC,QAAS,EACTC,IAAK,G,EAGPa,cAAgB,SAACN,GACf,EAAKO,UAAS,SAACF,GACb,OAAO,eAAGL,EAASK,EAAML,GAAU,O,EAIvCQ,mBAAqB,WACnB,OAAO,EAAKH,MAAMd,KAAO,EAAKc,MAAMb,QAAU,EAAKa,MAAMZ,K,EAG3DgB,gCAAkC,WAChC,OAAO,EAAKJ,MAAMd,KAAO,EAAKiB,sB,uDAI9B,OACE,gCACE,uDACA,cAACZ,EAAD,CACEC,QAAS,CAAC,OAAQ,UAAW,OAC7BC,gBAAiBY,KAAKJ,gBAcxB,cAAChB,EAAD,CACEC,KAAMmB,KAAKL,MAAMd,KACjBC,QAASkB,KAAKL,MAAMb,QACpBC,IAAKiB,KAAKL,MAAMZ,IAChBC,MAAOgB,KAAKF,qBACZb,mBAA6D,IAAzCe,KAAKD,2C,GA9CZE,IAAMC,WCKdC,MARf,WACE,OACE,qBAAKC,UAAU,MAAf,SACE,cAAC,EAAD,OCOSC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.ad16f01a.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nexport default function Statistics({\r\n  good,\r\n  neutral,\r\n  bad,\r\n  total,\r\n  positivePercentage,\r\n}) {\r\n  return (\r\n    <div>\r\n      {/* <h2>Statistics</h2>\r\n        <p>Good: {this.state.good}</p>\r\n        <p>Neutral: {this.state.neutral}</p>\r\n        <p>Bad: {this.state.bad}</p>\r\n        <p>Total: {this.countTotalFeedback()}</p>\r\n        <p>\r\n          Positive feedback: {this.countPositiveFeedbackPercentage() * 100}%\r\n        </p> */}\r\n      <ul>\r\n        {\" \"}\r\n        Statistics\r\n        <li>Good: {good}</li>\r\n        <li>Neutral: {neutral}</li>\r\n        <li>Bad: {bad}</li>\r\n        <li>Total: {total}</li>\r\n        <li>Positive feedback: {positivePercentage}%</li>\r\n      </ul>\r\n      ;\r\n    </div>\r\n  );\r\n}\r\n\r\n// export default Statistics;\r\n","import React from \"react\";\r\n\r\nexport default function FeedbackOptions({ options, onLeaveFeedback }) {\r\n  return options.map((option) => (\r\n    <button type=\"button\" name={option} onClick={onLeaveFeedback(option)}>\r\n      {option}\r\n    </button>\r\n  ));\r\n}\r\n\r\n//   <h2>Please leave feedback</h2>\r\n//   <button type=\"button\" name=\"good\" onClick={onLeaveFeedback}>\r\n//     Good\r\n//   </button>\r\n//   <button type=\"button\" name=\"neutral\" onClick={onLeaveFeedback}>\r\n//     Neutral\r\n//   </button>\r\n//   <button type=\"button\" name=\"bad\" onClick={onLeaveFeedback}>\r\n//     Bad\r\n//   </button>\r\n","import React from \"react\";\r\n\r\nimport Statistics from \"./Statistics\";\r\nimport FeedbackOptions from \"./FeedbackOptions\";\r\n\r\nclass Feedback extends React.Component {\r\n  state = {\r\n    good: 0,\r\n    neutral: 0,\r\n    bad: 0,\r\n  };\r\n\r\n  clickEventBtn = (option) => {\r\n    this.setState((state) => {\r\n      return { [option]: state[option] + 1 };\r\n    });\r\n  };\r\n\r\n  countTotalFeedback = () => {\r\n    return this.state.good + this.state.neutral + this.state.bad;\r\n  };\r\n\r\n  countPositiveFeedbackPercentage = () => {\r\n    return this.state.good / this.countTotalFeedback();\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h2>Please leave feedback</h2>\r\n        <FeedbackOptions\r\n          options={[\"good\", \"neutral\", \"bad\"]}\r\n          onLeaveFeedback={this.clickEventBtn}\r\n        />\r\n\r\n        {/* <h2>Please leave feedback</h2>\r\n        <button type=\"button\" name=\"good\" onClick={this.clickEventBtn}>\r\n          Good\r\n        </button>\r\n        <button type=\"button\" name=\"neutral\" onClick={this.clickEventBtn}>\r\n          Neutral\r\n        </button>\r\n        <button type=\"button\" name=\"bad\" onClick={this.clickEventBtn}>\r\n          Bad\r\n        </button> */}\r\n\r\n        <Statistics\r\n          good={this.state.good}\r\n          neutral={this.state.neutral}\r\n          bad={this.state.bad}\r\n          total={this.countTotalFeedback()}\r\n          positivePercentage={this.countPositiveFeedbackPercentage() * 100}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Feedback;\r\n","import Feedback from \"./components/Feedback/Feedback\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Feedback />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}